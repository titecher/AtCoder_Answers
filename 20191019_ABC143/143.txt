枚数の配列を作る
枚数の多い2つの組をとる。
Ai --
Aj --
配列を更新
この操作ができた回数を数える。


#include<stdio.h>
#include<stdlib.h>
#include<string.h>

int asc(const void *a, const void *b) {
  return *(int *)a - *(int *)b;
}
int desc(const void *a, const void *b) {
  return *(int *)b - *(int *)a;
}

int main(void) {
  int N;
  int i,j,k;
  int *A,*B,*C,*D;
  int var;
  
  scanf("%d\n", &N);
  A = (int *)calloc(N,sizeof(int));
  B = (int *)calloc(N,sizeof(int));
  for(i=0;i<N;i++)
  {
  	scanf("%d", &A[i]);
  }
  //printf("%d %d %d\n",A[0],A[1],A[2]);
  qsort(A, N, sizeof(int), asc);
  //printf("%d %d %d\n",A[0],A[1],A[2]);
  var=1;
  for(i=0;i<N-1;i++)
  {
    B[i]=var;
  if(A[i]!=A[i+1])
   {
   var+=1;
   }
  }
  B[N-1]=var;
  //count
  C = (int *)calloc(var,sizeof(int));
  D = (int *)calloc(var,sizeof(int));
  for(i=0;i<N;i++)
  {
  C[B[i]-1]+=1;
  }
  //printf("B %d %d %d\n",C[0],C[1],C[2]);
  qsort(C, var, sizeof(int), desc);
  //printf("A %d %d %d\n",C[0],C[1],C[2]);
  
  //Cに枚数の配列できてる。
  //ここあら繰り返し。
  int K;
  int dist_num;
  int count;
  
  for(K=1;K<N+1;K++)
  {
  memcpy(D, C, var*sizeof(int));
  dist_num =var;
  count =0;
  while(dist_num >K-1)
  {	
    count ++;
    //printf("%d %d %d\n",D[0],D[1],D[2]);
    qsort(D, var, sizeof(int), desc);
    for(i=0;i<K;i++)
  	{
  		D[i]--;	
	}
    dist_num =0;
    for(i=0;i<var;i++)
    {
    	dist_num +=(D[i]>0?1:0);
    }
  }
  printf("%d\n",count);
  }//K
}

#include<stdio.h>
#include<stdlib.h>

int asc(const void *a, const void *b) {
  return *(int *)a - *(int *)b;
}

int main(void) {
  int N;
  int i,j,k;
  int *l;
  scanf("%d\n", &N);
  l = (int *)calloc(N,sizeof(int));
  for(i=0;i<N;i++)
  {
  	scanf("%d", &l[i]);
  }
  //read
  //printf("%d\n",N);
  //printf("%d %d",l[0],l[1]);
  
  qsort(l, N, sizeof(int), asc);

  int flag =0;
  for(i=0;i<N-2;i++)
  {
  	for(j=i+1;j<N-1;j++)
  	{
      	for(k=j+1;k<N;k++)
        {
          if(l[k]>=l[i]+l[j])
          {
            flag += k-1-j;
            break;
          }else if(k==N-1)
          {
          	flag += k-j;
          }
          
        }
      	//printf("%d %d %d\n",i,j,flag);
  	}
  }
  printf("%d",flag);
}